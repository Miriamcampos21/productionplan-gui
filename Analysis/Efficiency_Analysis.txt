Analicemos un caso con:
Hrs = 15.9
Setup = 2.0
Piezas por hacer 220 ... 

Teniendo como información lo siguiente:
FT = 8.5            (First Turn)
ST = 8.1            (Second Turn)
TT = 5.5            (Third Turn)

El problema aquí claramente radica en que 15.9 es por mucho mayor al primer turno, entonces la orden se debe dividir eficientemente.

El primer turno es 8.5, ¿cómo eficientamos eso?

8.5(ft) - 2.0 (setup hours) = 6.5, entonces la primer orden tendría esta información:
o1 ~~~> 6.5, 2.0 = 8.5
En la orden anterior abarcamos todo el primer orden, para la subsequentes órdenes tenemos que tomar en cuenta poner en 0.0 el setup para las 
otras órdenes.

o2) 15.9 - 6.5 = 9.4, aún nos quedan por cubrir 9.4.
El ST son 8.1 por lo que fácilmente podemos abarcar eso ahí.
o2) ~~~> 8.1
Con esto llevamos ya:
6.5 + 8.1 = 14.6

15.9 - 14.6 = 1.3

o3)

Intentando ordenarlo mejor, pensarlo de otra manera:

sumHours = 0.0
if o.hours() > FT; then
	sumHours += FT - o.setup()
	... sumHours += 8.5 - 2.0
	... sumHours = 6.5
	efficiency = 6.5 * (220 / 15.9)
	... efficiency = 89.93 ... rounded to 90.0
fi


woHours = wo.getHours()
