Cómo afectan los "priorities" al algoritmo actual?

Al tener una lista de prioridades cuya propiedad principal del objeto interno es el
 "part number".

 Esto nos dice que esas partes deben ir sí o sí antes que todo.

¿Cómo hacemos que queden al principio? Esto es lo que se me ocurre, quizás no muy elocuente o brillante en un principio
pero ya iremos afinando la idea.

El método para construir los planes recibe un List de priorities:
```java
public static List<WorkOrderInformation> buildPlanForTwoTurns(
    final String workCenter
    , final List<WorkOrderInformation> workOrderItems
    , final List<Priority> priorities
) {
```

Un objeto de tipo **Priority** consta de dos prioridades:

private String partNumber;
private int order;

Esencialmente la propiedad "partNumber" nos servirá para obtener los items correspondientes de otro parámetro del método:
```java
, final List<WorkOrderInformation> workOrderItems
```

## Pensando en alternativas.

La lista de prioridades debe de:
1) Identificar los items de **workOrderItems**, ponerlos en una lista temporal
1.1) Con identificar me refiero a obtener los items que tengan en el mismo part number.
2) Ordenar estos items por age.
2.1) Agruparlos
	```java
	final List<WorkOrderInformation> workOrderItems = Utils.sortAndGroup(items, new AgeComparator());
	```
3) Remover los items identificados de la lista original (**workOrderItems**) porque si no quedarían duplicados ...

